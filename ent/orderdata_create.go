// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nats-streaming-web/ent/orderdata"
	"nats-streaming-web/pkg/model"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderDataCreate is the builder for creating a OrderData entity.
type OrderDataCreate struct {
	config
	mutation *OrderDataMutation
	hooks    []Hook
}

// SetOrderUID sets the "order_uid" field.
func (odc *OrderDataCreate) SetOrderUID(s string) *OrderDataCreate {
	odc.mutation.SetOrderUID(s)
	return odc
}

// SetTrackNumber sets the "track_number" field.
func (odc *OrderDataCreate) SetTrackNumber(s string) *OrderDataCreate {
	odc.mutation.SetTrackNumber(s)
	return odc
}

// SetEntry sets the "entry" field.
func (odc *OrderDataCreate) SetEntry(s string) *OrderDataCreate {
	odc.mutation.SetEntry(s)
	return odc
}

// SetDelivery sets the "delivery" field.
func (odc *OrderDataCreate) SetDelivery(m *model.Delivery) *OrderDataCreate {
	odc.mutation.SetDelivery(m)
	return odc
}

// SetPayment sets the "payment" field.
func (odc *OrderDataCreate) SetPayment(m *model.Payment) *OrderDataCreate {
	odc.mutation.SetPayment(m)
	return odc
}

// SetItems sets the "items" field.
func (odc *OrderDataCreate) SetItems(m []*model.Item) *OrderDataCreate {
	odc.mutation.SetItems(m)
	return odc
}

// SetLocale sets the "locale" field.
func (odc *OrderDataCreate) SetLocale(s string) *OrderDataCreate {
	odc.mutation.SetLocale(s)
	return odc
}

// SetInternalSignature sets the "internal_signature" field.
func (odc *OrderDataCreate) SetInternalSignature(s string) *OrderDataCreate {
	odc.mutation.SetInternalSignature(s)
	return odc
}

// SetCustomerID sets the "customer_id" field.
func (odc *OrderDataCreate) SetCustomerID(s string) *OrderDataCreate {
	odc.mutation.SetCustomerID(s)
	return odc
}

// SetDeliveryService sets the "delivery_service" field.
func (odc *OrderDataCreate) SetDeliveryService(s string) *OrderDataCreate {
	odc.mutation.SetDeliveryService(s)
	return odc
}

// SetShardkey sets the "shardkey" field.
func (odc *OrderDataCreate) SetShardkey(s string) *OrderDataCreate {
	odc.mutation.SetShardkey(s)
	return odc
}

// SetSmID sets the "sm_id" field.
func (odc *OrderDataCreate) SetSmID(i int) *OrderDataCreate {
	odc.mutation.SetSmID(i)
	return odc
}

// SetDateCreated sets the "date_created" field.
func (odc *OrderDataCreate) SetDateCreated(s string) *OrderDataCreate {
	odc.mutation.SetDateCreated(s)
	return odc
}

// SetOofShard sets the "oof_shard" field.
func (odc *OrderDataCreate) SetOofShard(s string) *OrderDataCreate {
	odc.mutation.SetOofShard(s)
	return odc
}

// Mutation returns the OrderDataMutation object of the builder.
func (odc *OrderDataCreate) Mutation() *OrderDataMutation {
	return odc.mutation
}

// Save creates the OrderData in the database.
func (odc *OrderDataCreate) Save(ctx context.Context) (*OrderData, error) {
	return withHooks(ctx, odc.sqlSave, odc.mutation, odc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (odc *OrderDataCreate) SaveX(ctx context.Context) *OrderData {
	v, err := odc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odc *OrderDataCreate) Exec(ctx context.Context) error {
	_, err := odc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odc *OrderDataCreate) ExecX(ctx context.Context) {
	if err := odc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (odc *OrderDataCreate) check() error {
	if _, ok := odc.mutation.OrderUID(); !ok {
		return &ValidationError{Name: "order_uid", err: errors.New(`ent: missing required field "OrderData.order_uid"`)}
	}
	if v, ok := odc.mutation.OrderUID(); ok {
		if err := orderdata.OrderUIDValidator(v); err != nil {
			return &ValidationError{Name: "order_uid", err: fmt.Errorf(`ent: validator failed for field "OrderData.order_uid": %w`, err)}
		}
	}
	if _, ok := odc.mutation.TrackNumber(); !ok {
		return &ValidationError{Name: "track_number", err: errors.New(`ent: missing required field "OrderData.track_number"`)}
	}
	if _, ok := odc.mutation.Entry(); !ok {
		return &ValidationError{Name: "entry", err: errors.New(`ent: missing required field "OrderData.entry"`)}
	}
	if _, ok := odc.mutation.Delivery(); !ok {
		return &ValidationError{Name: "delivery", err: errors.New(`ent: missing required field "OrderData.delivery"`)}
	}
	if _, ok := odc.mutation.Payment(); !ok {
		return &ValidationError{Name: "payment", err: errors.New(`ent: missing required field "OrderData.payment"`)}
	}
	if _, ok := odc.mutation.Items(); !ok {
		return &ValidationError{Name: "items", err: errors.New(`ent: missing required field "OrderData.items"`)}
	}
	if _, ok := odc.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "OrderData.locale"`)}
	}
	if _, ok := odc.mutation.InternalSignature(); !ok {
		return &ValidationError{Name: "internal_signature", err: errors.New(`ent: missing required field "OrderData.internal_signature"`)}
	}
	if _, ok := odc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "OrderData.customer_id"`)}
	}
	if _, ok := odc.mutation.DeliveryService(); !ok {
		return &ValidationError{Name: "delivery_service", err: errors.New(`ent: missing required field "OrderData.delivery_service"`)}
	}
	if _, ok := odc.mutation.Shardkey(); !ok {
		return &ValidationError{Name: "shardkey", err: errors.New(`ent: missing required field "OrderData.shardkey"`)}
	}
	if _, ok := odc.mutation.SmID(); !ok {
		return &ValidationError{Name: "sm_id", err: errors.New(`ent: missing required field "OrderData.sm_id"`)}
	}
	if _, ok := odc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "date_created", err: errors.New(`ent: missing required field "OrderData.date_created"`)}
	}
	if _, ok := odc.mutation.OofShard(); !ok {
		return &ValidationError{Name: "oof_shard", err: errors.New(`ent: missing required field "OrderData.oof_shard"`)}
	}
	return nil
}

func (odc *OrderDataCreate) sqlSave(ctx context.Context) (*OrderData, error) {
	if err := odc.check(); err != nil {
		return nil, err
	}
	_node, _spec := odc.createSpec()
	if err := sqlgraph.CreateNode(ctx, odc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	odc.mutation.id = &_node.ID
	odc.mutation.done = true
	return _node, nil
}

func (odc *OrderDataCreate) createSpec() (*OrderData, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderData{config: odc.config}
		_spec = sqlgraph.NewCreateSpec(orderdata.Table, sqlgraph.NewFieldSpec(orderdata.FieldID, field.TypeInt))
	)
	if value, ok := odc.mutation.OrderUID(); ok {
		_spec.SetField(orderdata.FieldOrderUID, field.TypeString, value)
		_node.OrderUID = value
	}
	if value, ok := odc.mutation.TrackNumber(); ok {
		_spec.SetField(orderdata.FieldTrackNumber, field.TypeString, value)
		_node.TrackNumber = value
	}
	if value, ok := odc.mutation.Entry(); ok {
		_spec.SetField(orderdata.FieldEntry, field.TypeString, value)
		_node.Entry = value
	}
	if value, ok := odc.mutation.Delivery(); ok {
		_spec.SetField(orderdata.FieldDelivery, field.TypeJSON, value)
		_node.Delivery = value
	}
	if value, ok := odc.mutation.Payment(); ok {
		_spec.SetField(orderdata.FieldPayment, field.TypeJSON, value)
		_node.Payment = value
	}
	if value, ok := odc.mutation.Items(); ok {
		_spec.SetField(orderdata.FieldItems, field.TypeJSON, value)
		_node.Items = value
	}
	if value, ok := odc.mutation.Locale(); ok {
		_spec.SetField(orderdata.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := odc.mutation.InternalSignature(); ok {
		_spec.SetField(orderdata.FieldInternalSignature, field.TypeString, value)
		_node.InternalSignature = value
	}
	if value, ok := odc.mutation.CustomerID(); ok {
		_spec.SetField(orderdata.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := odc.mutation.DeliveryService(); ok {
		_spec.SetField(orderdata.FieldDeliveryService, field.TypeString, value)
		_node.DeliveryService = value
	}
	if value, ok := odc.mutation.Shardkey(); ok {
		_spec.SetField(orderdata.FieldShardkey, field.TypeString, value)
		_node.Shardkey = value
	}
	if value, ok := odc.mutation.SmID(); ok {
		_spec.SetField(orderdata.FieldSmID, field.TypeInt, value)
		_node.SmID = value
	}
	if value, ok := odc.mutation.DateCreated(); ok {
		_spec.SetField(orderdata.FieldDateCreated, field.TypeString, value)
		_node.DateCreated = value
	}
	if value, ok := odc.mutation.OofShard(); ok {
		_spec.SetField(orderdata.FieldOofShard, field.TypeString, value)
		_node.OofShard = value
	}
	return _node, _spec
}

// OrderDataCreateBulk is the builder for creating many OrderData entities in bulk.
type OrderDataCreateBulk struct {
	config
	err      error
	builders []*OrderDataCreate
}

// Save creates the OrderData entities in the database.
func (odcb *OrderDataCreateBulk) Save(ctx context.Context) ([]*OrderData, error) {
	if odcb.err != nil {
		return nil, odcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(odcb.builders))
	nodes := make([]*OrderData, len(odcb.builders))
	mutators := make([]Mutator, len(odcb.builders))
	for i := range odcb.builders {
		func(i int, root context.Context) {
			builder := odcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, odcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, odcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, odcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (odcb *OrderDataCreateBulk) SaveX(ctx context.Context) []*OrderData {
	v, err := odcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odcb *OrderDataCreateBulk) Exec(ctx context.Context) error {
	_, err := odcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odcb *OrderDataCreateBulk) ExecX(ctx context.Context) {
	if err := odcb.Exec(ctx); err != nil {
		panic(err)
	}
}
