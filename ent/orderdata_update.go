// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nats-streaming-web/ent/orderdata"
	"nats-streaming-web/ent/predicate"
	"nats-streaming-web/pkg/model"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// OrderDataUpdate is the builder for updating OrderData entities.
type OrderDataUpdate struct {
	config
	hooks    []Hook
	mutation *OrderDataMutation
}

// Where appends a list predicates to the OrderDataUpdate builder.
func (odu *OrderDataUpdate) Where(ps ...predicate.OrderData) *OrderDataUpdate {
	odu.mutation.Where(ps...)
	return odu
}

// SetOrderUID sets the "order_uid" field.
func (odu *OrderDataUpdate) SetOrderUID(s string) *OrderDataUpdate {
	odu.mutation.SetOrderUID(s)
	return odu
}

// SetTrackNumber sets the "track_number" field.
func (odu *OrderDataUpdate) SetTrackNumber(s string) *OrderDataUpdate {
	odu.mutation.SetTrackNumber(s)
	return odu
}

// SetEntry sets the "entry" field.
func (odu *OrderDataUpdate) SetEntry(s string) *OrderDataUpdate {
	odu.mutation.SetEntry(s)
	return odu
}

// SetDelivery sets the "delivery" field.
func (odu *OrderDataUpdate) SetDelivery(m *model.Delivery) *OrderDataUpdate {
	odu.mutation.SetDelivery(m)
	return odu
}

// SetPayment sets the "payment" field.
func (odu *OrderDataUpdate) SetPayment(m *model.Payment) *OrderDataUpdate {
	odu.mutation.SetPayment(m)
	return odu
}

// SetItems sets the "items" field.
func (odu *OrderDataUpdate) SetItems(m []*model.Item) *OrderDataUpdate {
	odu.mutation.SetItems(m)
	return odu
}

// AppendItems appends m to the "items" field.
func (odu *OrderDataUpdate) AppendItems(m []*model.Item) *OrderDataUpdate {
	odu.mutation.AppendItems(m)
	return odu
}

// SetLocale sets the "locale" field.
func (odu *OrderDataUpdate) SetLocale(s string) *OrderDataUpdate {
	odu.mutation.SetLocale(s)
	return odu
}

// SetInternalSignature sets the "internal_signature" field.
func (odu *OrderDataUpdate) SetInternalSignature(s string) *OrderDataUpdate {
	odu.mutation.SetInternalSignature(s)
	return odu
}

// SetCustomerID sets the "customer_id" field.
func (odu *OrderDataUpdate) SetCustomerID(s string) *OrderDataUpdate {
	odu.mutation.SetCustomerID(s)
	return odu
}

// SetDeliveryService sets the "delivery_service" field.
func (odu *OrderDataUpdate) SetDeliveryService(s string) *OrderDataUpdate {
	odu.mutation.SetDeliveryService(s)
	return odu
}

// SetShardkey sets the "shardkey" field.
func (odu *OrderDataUpdate) SetShardkey(s string) *OrderDataUpdate {
	odu.mutation.SetShardkey(s)
	return odu
}

// SetSmID sets the "sm_id" field.
func (odu *OrderDataUpdate) SetSmID(i int) *OrderDataUpdate {
	odu.mutation.ResetSmID()
	odu.mutation.SetSmID(i)
	return odu
}

// AddSmID adds i to the "sm_id" field.
func (odu *OrderDataUpdate) AddSmID(i int) *OrderDataUpdate {
	odu.mutation.AddSmID(i)
	return odu
}

// SetDateCreated sets the "date_created" field.
func (odu *OrderDataUpdate) SetDateCreated(s string) *OrderDataUpdate {
	odu.mutation.SetDateCreated(s)
	return odu
}

// SetOofShard sets the "oof_shard" field.
func (odu *OrderDataUpdate) SetOofShard(s string) *OrderDataUpdate {
	odu.mutation.SetOofShard(s)
	return odu
}

// Mutation returns the OrderDataMutation object of the builder.
func (odu *OrderDataUpdate) Mutation() *OrderDataMutation {
	return odu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (odu *OrderDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, odu.sqlSave, odu.mutation, odu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (odu *OrderDataUpdate) SaveX(ctx context.Context) int {
	affected, err := odu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (odu *OrderDataUpdate) Exec(ctx context.Context) error {
	_, err := odu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odu *OrderDataUpdate) ExecX(ctx context.Context) {
	if err := odu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (odu *OrderDataUpdate) check() error {
	if v, ok := odu.mutation.OrderUID(); ok {
		if err := orderdata.OrderUIDValidator(v); err != nil {
			return &ValidationError{Name: "order_uid", err: fmt.Errorf(`ent: validator failed for field "OrderData.order_uid": %w`, err)}
		}
	}
	return nil
}

func (odu *OrderDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := odu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderdata.Table, orderdata.Columns, sqlgraph.NewFieldSpec(orderdata.FieldID, field.TypeInt))
	if ps := odu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := odu.mutation.OrderUID(); ok {
		_spec.SetField(orderdata.FieldOrderUID, field.TypeString, value)
	}
	if value, ok := odu.mutation.TrackNumber(); ok {
		_spec.SetField(orderdata.FieldTrackNumber, field.TypeString, value)
	}
	if value, ok := odu.mutation.Entry(); ok {
		_spec.SetField(orderdata.FieldEntry, field.TypeString, value)
	}
	if value, ok := odu.mutation.Delivery(); ok {
		_spec.SetField(orderdata.FieldDelivery, field.TypeJSON, value)
	}
	if value, ok := odu.mutation.Payment(); ok {
		_spec.SetField(orderdata.FieldPayment, field.TypeJSON, value)
	}
	if value, ok := odu.mutation.Items(); ok {
		_spec.SetField(orderdata.FieldItems, field.TypeJSON, value)
	}
	if value, ok := odu.mutation.AppendedItems(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orderdata.FieldItems, value)
		})
	}
	if value, ok := odu.mutation.Locale(); ok {
		_spec.SetField(orderdata.FieldLocale, field.TypeString, value)
	}
	if value, ok := odu.mutation.InternalSignature(); ok {
		_spec.SetField(orderdata.FieldInternalSignature, field.TypeString, value)
	}
	if value, ok := odu.mutation.CustomerID(); ok {
		_spec.SetField(orderdata.FieldCustomerID, field.TypeString, value)
	}
	if value, ok := odu.mutation.DeliveryService(); ok {
		_spec.SetField(orderdata.FieldDeliveryService, field.TypeString, value)
	}
	if value, ok := odu.mutation.Shardkey(); ok {
		_spec.SetField(orderdata.FieldShardkey, field.TypeString, value)
	}
	if value, ok := odu.mutation.SmID(); ok {
		_spec.SetField(orderdata.FieldSmID, field.TypeInt, value)
	}
	if value, ok := odu.mutation.AddedSmID(); ok {
		_spec.AddField(orderdata.FieldSmID, field.TypeInt, value)
	}
	if value, ok := odu.mutation.DateCreated(); ok {
		_spec.SetField(orderdata.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := odu.mutation.OofShard(); ok {
		_spec.SetField(orderdata.FieldOofShard, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, odu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	odu.mutation.done = true
	return n, nil
}

// OrderDataUpdateOne is the builder for updating a single OrderData entity.
type OrderDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderDataMutation
}

// SetOrderUID sets the "order_uid" field.
func (oduo *OrderDataUpdateOne) SetOrderUID(s string) *OrderDataUpdateOne {
	oduo.mutation.SetOrderUID(s)
	return oduo
}

// SetTrackNumber sets the "track_number" field.
func (oduo *OrderDataUpdateOne) SetTrackNumber(s string) *OrderDataUpdateOne {
	oduo.mutation.SetTrackNumber(s)
	return oduo
}

// SetEntry sets the "entry" field.
func (oduo *OrderDataUpdateOne) SetEntry(s string) *OrderDataUpdateOne {
	oduo.mutation.SetEntry(s)
	return oduo
}

// SetDelivery sets the "delivery" field.
func (oduo *OrderDataUpdateOne) SetDelivery(m *model.Delivery) *OrderDataUpdateOne {
	oduo.mutation.SetDelivery(m)
	return oduo
}

// SetPayment sets the "payment" field.
func (oduo *OrderDataUpdateOne) SetPayment(m *model.Payment) *OrderDataUpdateOne {
	oduo.mutation.SetPayment(m)
	return oduo
}

// SetItems sets the "items" field.
func (oduo *OrderDataUpdateOne) SetItems(m []*model.Item) *OrderDataUpdateOne {
	oduo.mutation.SetItems(m)
	return oduo
}

// AppendItems appends m to the "items" field.
func (oduo *OrderDataUpdateOne) AppendItems(m []*model.Item) *OrderDataUpdateOne {
	oduo.mutation.AppendItems(m)
	return oduo
}

// SetLocale sets the "locale" field.
func (oduo *OrderDataUpdateOne) SetLocale(s string) *OrderDataUpdateOne {
	oduo.mutation.SetLocale(s)
	return oduo
}

// SetInternalSignature sets the "internal_signature" field.
func (oduo *OrderDataUpdateOne) SetInternalSignature(s string) *OrderDataUpdateOne {
	oduo.mutation.SetInternalSignature(s)
	return oduo
}

// SetCustomerID sets the "customer_id" field.
func (oduo *OrderDataUpdateOne) SetCustomerID(s string) *OrderDataUpdateOne {
	oduo.mutation.SetCustomerID(s)
	return oduo
}

// SetDeliveryService sets the "delivery_service" field.
func (oduo *OrderDataUpdateOne) SetDeliveryService(s string) *OrderDataUpdateOne {
	oduo.mutation.SetDeliveryService(s)
	return oduo
}

// SetShardkey sets the "shardkey" field.
func (oduo *OrderDataUpdateOne) SetShardkey(s string) *OrderDataUpdateOne {
	oduo.mutation.SetShardkey(s)
	return oduo
}

// SetSmID sets the "sm_id" field.
func (oduo *OrderDataUpdateOne) SetSmID(i int) *OrderDataUpdateOne {
	oduo.mutation.ResetSmID()
	oduo.mutation.SetSmID(i)
	return oduo
}

// AddSmID adds i to the "sm_id" field.
func (oduo *OrderDataUpdateOne) AddSmID(i int) *OrderDataUpdateOne {
	oduo.mutation.AddSmID(i)
	return oduo
}

// SetDateCreated sets the "date_created" field.
func (oduo *OrderDataUpdateOne) SetDateCreated(s string) *OrderDataUpdateOne {
	oduo.mutation.SetDateCreated(s)
	return oduo
}

// SetOofShard sets the "oof_shard" field.
func (oduo *OrderDataUpdateOne) SetOofShard(s string) *OrderDataUpdateOne {
	oduo.mutation.SetOofShard(s)
	return oduo
}

// Mutation returns the OrderDataMutation object of the builder.
func (oduo *OrderDataUpdateOne) Mutation() *OrderDataMutation {
	return oduo.mutation
}

// Where appends a list predicates to the OrderDataUpdate builder.
func (oduo *OrderDataUpdateOne) Where(ps ...predicate.OrderData) *OrderDataUpdateOne {
	oduo.mutation.Where(ps...)
	return oduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oduo *OrderDataUpdateOne) Select(field string, fields ...string) *OrderDataUpdateOne {
	oduo.fields = append([]string{field}, fields...)
	return oduo
}

// Save executes the query and returns the updated OrderData entity.
func (oduo *OrderDataUpdateOne) Save(ctx context.Context) (*OrderData, error) {
	return withHooks(ctx, oduo.sqlSave, oduo.mutation, oduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oduo *OrderDataUpdateOne) SaveX(ctx context.Context) *OrderData {
	node, err := oduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oduo *OrderDataUpdateOne) Exec(ctx context.Context) error {
	_, err := oduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oduo *OrderDataUpdateOne) ExecX(ctx context.Context) {
	if err := oduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oduo *OrderDataUpdateOne) check() error {
	if v, ok := oduo.mutation.OrderUID(); ok {
		if err := orderdata.OrderUIDValidator(v); err != nil {
			return &ValidationError{Name: "order_uid", err: fmt.Errorf(`ent: validator failed for field "OrderData.order_uid": %w`, err)}
		}
	}
	return nil
}

func (oduo *OrderDataUpdateOne) sqlSave(ctx context.Context) (_node *OrderData, err error) {
	if err := oduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderdata.Table, orderdata.Columns, sqlgraph.NewFieldSpec(orderdata.FieldID, field.TypeInt))
	id, ok := oduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderdata.FieldID)
		for _, f := range fields {
			if !orderdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oduo.mutation.OrderUID(); ok {
		_spec.SetField(orderdata.FieldOrderUID, field.TypeString, value)
	}
	if value, ok := oduo.mutation.TrackNumber(); ok {
		_spec.SetField(orderdata.FieldTrackNumber, field.TypeString, value)
	}
	if value, ok := oduo.mutation.Entry(); ok {
		_spec.SetField(orderdata.FieldEntry, field.TypeString, value)
	}
	if value, ok := oduo.mutation.Delivery(); ok {
		_spec.SetField(orderdata.FieldDelivery, field.TypeJSON, value)
	}
	if value, ok := oduo.mutation.Payment(); ok {
		_spec.SetField(orderdata.FieldPayment, field.TypeJSON, value)
	}
	if value, ok := oduo.mutation.Items(); ok {
		_spec.SetField(orderdata.FieldItems, field.TypeJSON, value)
	}
	if value, ok := oduo.mutation.AppendedItems(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orderdata.FieldItems, value)
		})
	}
	if value, ok := oduo.mutation.Locale(); ok {
		_spec.SetField(orderdata.FieldLocale, field.TypeString, value)
	}
	if value, ok := oduo.mutation.InternalSignature(); ok {
		_spec.SetField(orderdata.FieldInternalSignature, field.TypeString, value)
	}
	if value, ok := oduo.mutation.CustomerID(); ok {
		_spec.SetField(orderdata.FieldCustomerID, field.TypeString, value)
	}
	if value, ok := oduo.mutation.DeliveryService(); ok {
		_spec.SetField(orderdata.FieldDeliveryService, field.TypeString, value)
	}
	if value, ok := oduo.mutation.Shardkey(); ok {
		_spec.SetField(orderdata.FieldShardkey, field.TypeString, value)
	}
	if value, ok := oduo.mutation.SmID(); ok {
		_spec.SetField(orderdata.FieldSmID, field.TypeInt, value)
	}
	if value, ok := oduo.mutation.AddedSmID(); ok {
		_spec.AddField(orderdata.FieldSmID, field.TypeInt, value)
	}
	if value, ok := oduo.mutation.DateCreated(); ok {
		_spec.SetField(orderdata.FieldDateCreated, field.TypeString, value)
	}
	if value, ok := oduo.mutation.OofShard(); ok {
		_spec.SetField(orderdata.FieldOofShard, field.TypeString, value)
	}
	_node = &OrderData{config: oduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oduo.mutation.done = true
	return _node, nil
}
